{"ast":null,"code":"import { doc, setDoc, collection } from \"firebase/firestore\";\nimport { db } from \"../config/firebaseConfig\";\nimport { generatePDF, uploadPDF } from \"./reportService\";\n/**\n * Ensure all required paths exist in Firestore\n */\nconst ensurePathsExist = async (patientId, rehabPhase) => {\n  try {\n    console.log(`Ensuring paths exist for patient ${patientId} and phase ${rehabPhase}`);\n\n    // Ensure patient document exists\n    const patientRef = doc(db, `patients/${patientId}`);\n    console.log('Creating/updating patient document...');\n    await setDoc(patientRef, {\n      exists: true\n    }, {\n      merge: true\n    });\n\n    // Ensure reports collection exists under patient\n    const reportsRef = doc(db, `patients/${patientId}/reports`, rehabPhase);\n    console.log('Creating/updating reports collection...');\n    await setDoc(reportsRef, {\n      exists: true\n    }, {\n      merge: true\n    });\n    console.log('All paths successfully created');\n    return true;\n  } catch (error) {\n    console.error(\"Error ensuring paths exist:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n    }\n    throw error;\n  }\n};\n\n// Upload patient data to Firestore with timestamp-based structure\nexport const uploadPatientData = async (patientId, plan) => {\n  try {\n    var _exercises$hipFlexion;\n    console.log('Starting upload process for patient:', patientId);\n    const {\n      patientInfo,\n      legLength,\n      exercises,\n      sessionsPerDay\n    } = plan;\n    const timestamp = new Date().toISOString();\n\n    // Ensure all required paths exist\n    console.log('Ensuring paths exist...');\n    await ensurePathsExist(patientId, patientInfo.rehabilitationPhase);\n\n    // Create the report data\n    console.log('Creating report data...');\n    const reportData = {\n      name: patientInfo.patientName,\n      rehabPhase: patientInfo.rehabilitationPhase,\n      legLength,\n      frequency: sessionsPerDay,\n      parameters: {\n        hipFlexion: {\n          targetAngle: exercises.hipFlexion.targetAngle,\n          holdTime: exercises.hipFlexion.holdTime,\n          repetitions: exercises.hipFlexion.repetitions,\n          targetHeight: (_exercises$hipFlexion = exercises.hipFlexion.targetHeight) !== null && _exercises$hipFlexion !== void 0 ? _exercises$hipFlexion : 0\n        },\n        hamstringCurl: {\n          targetAngle: exercises.hamstringCurl.targetAngle,\n          holdTime: exercises.hamstringCurl.holdTime,\n          repetitions: exercises.hamstringCurl.repetitions\n        },\n        heelRaise: {\n          targetHeight: exercises.heelRaise.targetHeight || 0,\n          holdTime: exercises.heelRaise.holdTime,\n          repetitions: exercises.heelRaise.repetitions\n        }\n      },\n      timestamp,\n      lastUpdated: timestamp,\n      sessionTime: plan.sessionTime.toString(),\n      followUpTime: plan.followUpTime.toString()\n    };\n\n    // Create reports collection reference\n    console.log('Creating report document...');\n    const patientRef = doc(db, 'patients', patientId);\n    const reportsCollection = collection(patientRef, 'reports');\n    const reportRef = doc(reportsCollection, timestamp);\n\n    // Save initial report data\n    console.log('Saving initial report data...');\n    await setDoc(reportRef, reportData);\n\n    // Generate and upload PDF report\n    console.log('Generating PDF report...');\n    const pdfDoc = generatePDF(plan);\n    console.log('Uploading PDF to storage...');\n    const {\n      url: pdfUrl,\n      fileName,\n      localDateStr\n    } = await uploadPDF(patientId, patientInfo.rehabilitationPhase, pdfDoc, new Date());\n\n    // Update report data with PDF URL\n    console.log('Updating report with PDF URL...');\n    await setDoc(reportRef, {\n      ...reportData,\n      pdfUrl\n    }, {\n      merge: true\n    });\n\n    // Update patient's latest report reference\n    console.log('Updating patient document...');\n    await setDoc(patientRef, {\n      name: patientInfo.patientName,\n      latestReport: {\n        phase: patientInfo.rehabilitationPhase,\n        timestamp,\n        pdfUrl\n      },\n      lastUpdated: timestamp\n    }, {\n      merge: true\n    });\n    const reportPath = `patients/${patientId}/reports/${timestamp}`;\n    console.log(`Report successfully saved under path: ${reportPath}`);\n    return {\n      success: true,\n      pdfUrl,\n      reportPath\n    };\n  } catch (error) {\n    console.error(\"Error uploading patient data:\", error);\n    let errorDetails = 'Unknown error occurred';\n    if (error instanceof Error) {\n      errorDetails = `Error: ${error.name} - ${error.message}`;\n      console.error(\"Error details:\", {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      });\n    }\n    return {\n      success: false,\n      pdfUrl: null,\n      error: error instanceof Error ? error : new Error('Unknown error occurred'),\n      errorDetails\n    };\n  }\n};\nexport const generateReport = plan => {\n  const {\n    patientInfo,\n    legLength,\n    exercises,\n    sessionsPerDay\n  } = plan;\n  const report = {\n    name: patientInfo.patientName,\n    rehabPhase: patientInfo.rehabilitationPhase,\n    legLength,\n    frequency: sessionsPerDay,\n    report: {\n      hipFlexion: {\n        targetAngle: exercises.hipFlexion.targetAngle,\n        targetHeight: Math.round(legLength * Math.sin(exercises.hipFlexion.targetAngle * Math.PI / 180)),\n        holdTime: exercises.hipFlexion.holdTime,\n        repetitions: exercises.hipFlexion.repetitions,\n        explanation: `Lift your leg to ${exercises.hipFlexion.targetAngle} degrees (${Math.round(legLength * Math.sin(exercises.hipFlexion.targetAngle * Math.PI / 180))} cm) and hold for ${exercises.hipFlexion.holdTime} seconds.`\n      },\n      hamstringCurl: {\n        targetAngle: exercises.hamstringCurl.targetAngle,\n        holdTime: exercises.hamstringCurl.holdTime,\n        repetitions: exercises.hamstringCurl.repetitions,\n        explanation: `Bend your knee to ${exercises.hamstringCurl.targetAngle} degrees and hold for ${exercises.hamstringCurl.holdTime} seconds.`\n      },\n      heelRaise: {\n        targetHeight: exercises.heelRaise.targetHeight || 0,\n        holdTime: exercises.heelRaise.holdTime,\n        repetitions: exercises.heelRaise.repetitions,\n        explanation: `Raise your heel to ${exercises.heelRaise.targetHeight} cm and hold for ${exercises.heelRaise.holdTime} seconds.`\n      }\n    }\n  };\n  return report;\n};","map":{"version":3,"names":["doc","setDoc","collection","db","generatePDF","uploadPDF","ensurePathsExist","patientId","rehabPhase","console","log","patientRef","exists","merge","reportsRef","error","Error","message","stack","name","uploadPatientData","plan","_exercises$hipFlexion","patientInfo","legLength","exercises","sessionsPerDay","timestamp","Date","toISOString","rehabilitationPhase","reportData","patientName","frequency","parameters","hipFlexion","targetAngle","holdTime","repetitions","targetHeight","hamstringCurl","heelRaise","lastUpdated","sessionTime","toString","followUpTime","reportsCollection","reportRef","pdfDoc","url","pdfUrl","fileName","localDateStr","latestReport","phase","reportPath","success","errorDetails","generateReport","report","Math","round","sin","PI","explanation"],"sources":["/Users/linjunzhang/Desktop/Doctorâ€˜s Dashboard/doctor-dashboard/doctor_portal/src/services/firebase.ts"],"sourcesContent":["import { doc, setDoc, collection } from \"firebase/firestore\";\nimport { db } from \"../config/firebaseConfig\";\nimport { RehabilitationPlan, RehabilitationPhase } from \"../types\";\nimport { generatePDF, uploadPDF } from \"./reportService\";\n\ninterface UploadResult {\n  success: boolean;\n  pdfUrl: string | null;\n  error?: Error;\n  reportPath?: string;\n  errorDetails?: string;\n}\n\ninterface ReportData {\n  name: string;\n  rehabPhase: RehabilitationPhase;\n  legLength: number;\n  frequency: number;\n  parameters: {\n    hipFlexion: {\n      targetAngle: number;\n      holdTime: number;\n      repetitions: number;\n      targetHeight: number;\n    };\n    hamstringCurl: {\n      targetAngle: number;\n      holdTime: number;\n      repetitions: number;\n    };\n    heelRaise: {\n      targetHeight: number;\n      holdTime: number;\n      repetitions: number;\n    };\n  };\n  timestamp: string;\n  lastUpdated: string;\n  pdfUrl?: string;\n  sessionTime: string;\n  followUpTime: string;\n}\n\n/**\n * Ensure all required paths exist in Firestore\n */\nconst ensurePathsExist = async (patientId: string, rehabPhase: RehabilitationPhase) => {\n  try {\n    console.log(`Ensuring paths exist for patient ${patientId} and phase ${rehabPhase}`);\n    \n    // Ensure patient document exists\n    const patientRef = doc(db, `patients/${patientId}`);\n    console.log('Creating/updating patient document...');\n    await setDoc(patientRef, { exists: true }, { merge: true });\n\n    // Ensure reports collection exists under patient\n    const reportsRef = doc(db, `patients/${patientId}/reports`, rehabPhase);\n    console.log('Creating/updating reports collection...');\n    await setDoc(reportsRef, { exists: true }, { merge: true });\n\n    console.log('All paths successfully created');\n    return true;\n  } catch (error) {\n    console.error(\"Error ensuring paths exist:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n    }\n    throw error;\n  }\n};\n\n// Upload patient data to Firestore with timestamp-based structure\nexport const uploadPatientData = async (patientId: string, plan: RehabilitationPlan): Promise<UploadResult> => {\n  try {\n    console.log('Starting upload process for patient:', patientId);\n    const { patientInfo, legLength, exercises, sessionsPerDay } = plan;\n    const timestamp = new Date().toISOString();\n    \n    // Ensure all required paths exist\n    console.log('Ensuring paths exist...');\n    await ensurePathsExist(patientId, patientInfo.rehabilitationPhase);\n    \n    // Create the report data\n    console.log('Creating report data...');\n    const reportData: ReportData = {\n      name: patientInfo.patientName,\n      rehabPhase: patientInfo.rehabilitationPhase,\n      legLength,\n      frequency: sessionsPerDay,\n      parameters: {\n        hipFlexion: {\n          targetAngle: exercises.hipFlexion.targetAngle,\n          holdTime: exercises.hipFlexion.holdTime,\n          repetitions: exercises.hipFlexion.repetitions,\n          targetHeight: exercises.hipFlexion.targetHeight ?? 0\n        },\n        hamstringCurl: {\n          targetAngle: exercises.hamstringCurl.targetAngle,\n          holdTime: exercises.hamstringCurl.holdTime,\n          repetitions: exercises.hamstringCurl.repetitions\n        },\n        heelRaise: {\n          targetHeight: exercises.heelRaise.targetHeight || 0,\n          holdTime: exercises.heelRaise.holdTime,\n          repetitions: exercises.heelRaise.repetitions\n        }\n      },\n      timestamp,\n      lastUpdated: timestamp,\n      sessionTime: plan.sessionTime.toString(),\n      followUpTime: plan.followUpTime.toString()\n    };\n\n    // Create reports collection reference\n    console.log('Creating report document...');\n    const patientRef = doc(db, 'patients', patientId);\n    const reportsCollection = collection(patientRef, 'reports');\n    const reportRef = doc(reportsCollection, timestamp);\n    \n    // Save initial report data\n    console.log('Saving initial report data...');\n    await setDoc(reportRef, reportData);\n    \n    // Generate and upload PDF report\n    console.log('Generating PDF report...');\n    const pdfDoc = generatePDF(plan);\n    console.log('Uploading PDF to storage...');\n    const { url: pdfUrl, fileName, localDateStr } = await uploadPDF(patientId, patientInfo.rehabilitationPhase, pdfDoc, new Date());\n    \n    // Update report data with PDF URL\n    console.log('Updating report with PDF URL...');\n    await setDoc(reportRef, { \n      ...reportData,\n      pdfUrl\n    }, { merge: true });\n\n    // Update patient's latest report reference\n    console.log('Updating patient document...');\n    await setDoc(patientRef, {\n      name: patientInfo.patientName,\n      latestReport: {\n        phase: patientInfo.rehabilitationPhase,\n        timestamp,\n        pdfUrl\n      },\n      lastUpdated: timestamp\n    }, { merge: true });\n\n    const reportPath = `patients/${patientId}/reports/${timestamp}`;\n    console.log(`Report successfully saved under path: ${reportPath}`);\n    \n    return { \n      success: true, \n      pdfUrl,\n      reportPath\n    };\n  } catch (error) {\n    console.error(\"Error uploading patient data:\", error);\n    let errorDetails = 'Unknown error occurred';\n    \n    if (error instanceof Error) {\n      errorDetails = `Error: ${error.name} - ${error.message}`;\n      console.error(\"Error details:\", {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      });\n    }\n    \n    return { \n      success: false, \n      pdfUrl: null,\n      error: error instanceof Error ? error : new Error('Unknown error occurred'),\n      errorDetails\n    };\n  }\n};\n\nexport const generateReport = (plan: RehabilitationPlan) => {\n  const { patientInfo, legLength, exercises, sessionsPerDay } = plan;\n\n  const report = {\n    name: patientInfo.patientName,\n    rehabPhase: patientInfo.rehabilitationPhase,\n    legLength,\n    frequency: sessionsPerDay,\n    report: {\n      hipFlexion: {\n        targetAngle: exercises.hipFlexion.targetAngle,\n        targetHeight: Math.round(legLength * Math.sin((exercises.hipFlexion.targetAngle * Math.PI) / 180)),\n        holdTime: exercises.hipFlexion.holdTime,\n        repetitions: exercises.hipFlexion.repetitions,\n        explanation: `Lift your leg to ${exercises.hipFlexion.targetAngle} degrees (${Math.round(legLength * Math.sin((exercises.hipFlexion.targetAngle * Math.PI) / 180))} cm) and hold for ${exercises.hipFlexion.holdTime} seconds.`\n      },\n      hamstringCurl: {\n        targetAngle: exercises.hamstringCurl.targetAngle,\n        holdTime: exercises.hamstringCurl.holdTime,\n        repetitions: exercises.hamstringCurl.repetitions,\n        explanation: `Bend your knee to ${exercises.hamstringCurl.targetAngle} degrees and hold for ${exercises.hamstringCurl.holdTime} seconds.`\n      },\n      heelRaise: {\n        targetHeight: exercises.heelRaise.targetHeight || 0,\n        holdTime: exercises.heelRaise.holdTime,\n        repetitions: exercises.heelRaise.repetitions,\n        explanation: `Raise your heel to ${exercises.heelRaise.targetHeight} cm and hold for ${exercises.heelRaise.holdTime} seconds.`\n      }\n    }\n  };\n\n  return report;\n};"],"mappings":"AAAA,SAASA,GAAG,EAAEC,MAAM,EAAEC,UAAU,QAAQ,oBAAoB;AAC5D,SAASC,EAAE,QAAQ,0BAA0B;AAE7C,SAASC,WAAW,EAAEC,SAAS,QAAQ,iBAAiB;AAwCxD;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,SAAiB,EAAEC,UAA+B,KAAK;EACrF,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,oCAAoCH,SAAS,cAAcC,UAAU,EAAE,CAAC;;IAEpF;IACA,MAAMG,UAAU,GAAGX,GAAG,CAACG,EAAE,EAAE,YAAYI,SAAS,EAAE,CAAC;IACnDE,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpD,MAAMT,MAAM,CAACU,UAAU,EAAE;MAAEC,MAAM,EAAE;IAAK,CAAC,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;;IAE3D;IACA,MAAMC,UAAU,GAAGd,GAAG,CAACG,EAAE,EAAE,YAAYI,SAAS,UAAU,EAAEC,UAAU,CAAC;IACvEC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtD,MAAMT,MAAM,CAACa,UAAU,EAAE;MAAEF,MAAM,EAAE;IAAK,CAAC,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAE3DJ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7C,OAAO,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,IAAIA,KAAK,YAAYC,KAAK,EAAE;MAC1BP,OAAO,CAACM,KAAK,CAAC,gBAAgB,EAAE;QAC9BE,OAAO,EAAEF,KAAK,CAACE,OAAO;QACtBC,KAAK,EAAEH,KAAK,CAACG,KAAK;QAClBC,IAAI,EAAEJ,KAAK,CAACI;MACd,CAAC,CAAC;IACJ;IACA,MAAMJ,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAOb,SAAiB,EAAEc,IAAwB,KAA4B;EAC7G,IAAI;IAAA,IAAAC,qBAAA;IACFb,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEH,SAAS,CAAC;IAC9D,MAAM;MAAEgB,WAAW;MAAEC,SAAS;MAAEC,SAAS;MAAEC;IAAe,CAAC,GAAGL,IAAI;IAClE,MAAMM,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;IAE1C;IACApB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAMJ,gBAAgB,CAACC,SAAS,EAAEgB,WAAW,CAACO,mBAAmB,CAAC;;IAElE;IACArB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAMqB,UAAsB,GAAG;MAC7BZ,IAAI,EAAEI,WAAW,CAACS,WAAW;MAC7BxB,UAAU,EAAEe,WAAW,CAACO,mBAAmB;MAC3CN,SAAS;MACTS,SAAS,EAAEP,cAAc;MACzBQ,UAAU,EAAE;QACVC,UAAU,EAAE;UACVC,WAAW,EAAEX,SAAS,CAACU,UAAU,CAACC,WAAW;UAC7CC,QAAQ,EAAEZ,SAAS,CAACU,UAAU,CAACE,QAAQ;UACvCC,WAAW,EAAEb,SAAS,CAACU,UAAU,CAACG,WAAW;UAC7CC,YAAY,GAAAjB,qBAAA,GAAEG,SAAS,CAACU,UAAU,CAACI,YAAY,cAAAjB,qBAAA,cAAAA,qBAAA,GAAI;QACrD,CAAC;QACDkB,aAAa,EAAE;UACbJ,WAAW,EAAEX,SAAS,CAACe,aAAa,CAACJ,WAAW;UAChDC,QAAQ,EAAEZ,SAAS,CAACe,aAAa,CAACH,QAAQ;UAC1CC,WAAW,EAAEb,SAAS,CAACe,aAAa,CAACF;QACvC,CAAC;QACDG,SAAS,EAAE;UACTF,YAAY,EAAEd,SAAS,CAACgB,SAAS,CAACF,YAAY,IAAI,CAAC;UACnDF,QAAQ,EAAEZ,SAAS,CAACgB,SAAS,CAACJ,QAAQ;UACtCC,WAAW,EAAEb,SAAS,CAACgB,SAAS,CAACH;QACnC;MACF,CAAC;MACDX,SAAS;MACTe,WAAW,EAAEf,SAAS;MACtBgB,WAAW,EAAEtB,IAAI,CAACsB,WAAW,CAACC,QAAQ,CAAC,CAAC;MACxCC,YAAY,EAAExB,IAAI,CAACwB,YAAY,CAACD,QAAQ,CAAC;IAC3C,CAAC;;IAED;IACAnC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAMC,UAAU,GAAGX,GAAG,CAACG,EAAE,EAAE,UAAU,EAAEI,SAAS,CAAC;IACjD,MAAMuC,iBAAiB,GAAG5C,UAAU,CAACS,UAAU,EAAE,SAAS,CAAC;IAC3D,MAAMoC,SAAS,GAAG/C,GAAG,CAAC8C,iBAAiB,EAAEnB,SAAS,CAAC;;IAEnD;IACAlB,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C,MAAMT,MAAM,CAAC8C,SAAS,EAAEhB,UAAU,CAAC;;IAEnC;IACAtB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,MAAMsC,MAAM,GAAG5C,WAAW,CAACiB,IAAI,CAAC;IAChCZ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAM;MAAEuC,GAAG,EAAEC,MAAM;MAAEC,QAAQ;MAAEC;IAAa,CAAC,GAAG,MAAM/C,SAAS,CAACE,SAAS,EAAEgB,WAAW,CAACO,mBAAmB,EAAEkB,MAAM,EAAE,IAAIpB,IAAI,CAAC,CAAC,CAAC;;IAE/H;IACAnB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,MAAMT,MAAM,CAAC8C,SAAS,EAAE;MACtB,GAAGhB,UAAU;MACbmB;IACF,CAAC,EAAE;MAAErC,KAAK,EAAE;IAAK,CAAC,CAAC;;IAEnB;IACAJ,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,MAAMT,MAAM,CAACU,UAAU,EAAE;MACvBQ,IAAI,EAAEI,WAAW,CAACS,WAAW;MAC7BqB,YAAY,EAAE;QACZC,KAAK,EAAE/B,WAAW,CAACO,mBAAmB;QACtCH,SAAS;QACTuB;MACF,CAAC;MACDR,WAAW,EAAEf;IACf,CAAC,EAAE;MAAEd,KAAK,EAAE;IAAK,CAAC,CAAC;IAEnB,MAAM0C,UAAU,GAAG,YAAYhD,SAAS,YAAYoB,SAAS,EAAE;IAC/DlB,OAAO,CAACC,GAAG,CAAC,yCAAyC6C,UAAU,EAAE,CAAC;IAElE,OAAO;MACLC,OAAO,EAAE,IAAI;MACbN,MAAM;MACNK;IACF,CAAC;EACH,CAAC,CAAC,OAAOxC,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,IAAI0C,YAAY,GAAG,wBAAwB;IAE3C,IAAI1C,KAAK,YAAYC,KAAK,EAAE;MAC1ByC,YAAY,GAAG,UAAU1C,KAAK,CAACI,IAAI,MAAMJ,KAAK,CAACE,OAAO,EAAE;MACxDR,OAAO,CAACM,KAAK,CAAC,gBAAgB,EAAE;QAC9BI,IAAI,EAAEJ,KAAK,CAACI,IAAI;QAChBF,OAAO,EAAEF,KAAK,CAACE,OAAO;QACtBC,KAAK,EAAEH,KAAK,CAACG;MACf,CAAC,CAAC;IACJ;IAEA,OAAO;MACLsC,OAAO,EAAE,KAAK;MACdN,MAAM,EAAE,IAAI;MACZnC,KAAK,EAAEA,KAAK,YAAYC,KAAK,GAAGD,KAAK,GAAG,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC3EyC;IACF,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIrC,IAAwB,IAAK;EAC1D,MAAM;IAAEE,WAAW;IAAEC,SAAS;IAAEC,SAAS;IAAEC;EAAe,CAAC,GAAGL,IAAI;EAElE,MAAMsC,MAAM,GAAG;IACbxC,IAAI,EAAEI,WAAW,CAACS,WAAW;IAC7BxB,UAAU,EAAEe,WAAW,CAACO,mBAAmB;IAC3CN,SAAS;IACTS,SAAS,EAAEP,cAAc;IACzBiC,MAAM,EAAE;MACNxB,UAAU,EAAE;QACVC,WAAW,EAAEX,SAAS,CAACU,UAAU,CAACC,WAAW;QAC7CG,YAAY,EAAEqB,IAAI,CAACC,KAAK,CAACrC,SAAS,GAAGoC,IAAI,CAACE,GAAG,CAAErC,SAAS,CAACU,UAAU,CAACC,WAAW,GAAGwB,IAAI,CAACG,EAAE,GAAI,GAAG,CAAC,CAAC;QAClG1B,QAAQ,EAAEZ,SAAS,CAACU,UAAU,CAACE,QAAQ;QACvCC,WAAW,EAAEb,SAAS,CAACU,UAAU,CAACG,WAAW;QAC7C0B,WAAW,EAAE,oBAAoBvC,SAAS,CAACU,UAAU,CAACC,WAAW,aAAawB,IAAI,CAACC,KAAK,CAACrC,SAAS,GAAGoC,IAAI,CAACE,GAAG,CAAErC,SAAS,CAACU,UAAU,CAACC,WAAW,GAAGwB,IAAI,CAACG,EAAE,GAAI,GAAG,CAAC,CAAC,qBAAqBtC,SAAS,CAACU,UAAU,CAACE,QAAQ;MACtN,CAAC;MACDG,aAAa,EAAE;QACbJ,WAAW,EAAEX,SAAS,CAACe,aAAa,CAACJ,WAAW;QAChDC,QAAQ,EAAEZ,SAAS,CAACe,aAAa,CAACH,QAAQ;QAC1CC,WAAW,EAAEb,SAAS,CAACe,aAAa,CAACF,WAAW;QAChD0B,WAAW,EAAE,qBAAqBvC,SAAS,CAACe,aAAa,CAACJ,WAAW,yBAAyBX,SAAS,CAACe,aAAa,CAACH,QAAQ;MAChI,CAAC;MACDI,SAAS,EAAE;QACTF,YAAY,EAAEd,SAAS,CAACgB,SAAS,CAACF,YAAY,IAAI,CAAC;QACnDF,QAAQ,EAAEZ,SAAS,CAACgB,SAAS,CAACJ,QAAQ;QACtCC,WAAW,EAAEb,SAAS,CAACgB,SAAS,CAACH,WAAW;QAC5C0B,WAAW,EAAE,sBAAsBvC,SAAS,CAACgB,SAAS,CAACF,YAAY,oBAAoBd,SAAS,CAACgB,SAAS,CAACJ,QAAQ;MACrH;IACF;EACF,CAAC;EAED,OAAOsB,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}